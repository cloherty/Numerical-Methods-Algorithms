function [L,U,P] = luFactor(A);
% This function uses multiple iterations of Gauss Elimination to decompose
% a square matrix 'A' into into the L (lower triangular) and U (upper
% triangular) matrices. From these matrices, back substitution can be
% employed to solve for the b matrix in a system of equations, even if that
% matrix is distorted.

%% Preliminary Check
%clc --If variables in workspace are cleared before the function is run, whatever matrix that is being tested...
%clear ... can not be imported because it is immediately deleted, so an example A matrix can be imported below if necessary
%A=[10,2,-1;-3,-6,2;1,1,5]
[row,col]=size(A); %Initializes the input matrix, determines quantity of rows and columns
if nargin~=1 % Checks for correct number of inputs
    error('Incorrect number of inputs') 
elseif row~=col %Checks for a square input matrix
    error('Matrix dimensions must be square')
end
%% Initial Pivot

max=-1; % Determines the largest absolute value of the first column, and pivots that row to the top of the matrix
i_max=1;
for i=1:row
    if abs(A(i,1))>max % Abs. val. will always be greater than max, ensuring the largest value is pivoted to the top
        max=abs(A(i,1));
        i_max=i;
    end
end

%% Pivot Matrix
P=eye(size(A)); % Sets up initial pivot matrix, which is just the identity matrix before it is altered
if max==A(2,1) % If the initial matrix is pivoted, then pivot matrix is manipulated to track that pivot
    P(1,:)=P(2,:);
    P(2,:)=[1,0,0];
elseif max==A(end,1) % Depending on which row is pivoted, the pivot matrix will be different
    P(1,:)=P(end,:);
    P(3,:)=[1,0,0];
end
%% Gauss Elimination: 1st Elimination 
div1=A(2,1)/A(1,1); % Factor to cancel out first term in the Gauss Elimination
newrow2=A(1,:)*div1; % Multiply row by said factor
newrow2=[A(2,:)-newrow2]; % Actual cancellation step

%% Gauss Elimination: 2nd Elimination
if length(A)>2 % if the input matrix is greater than a 2x2, a second round of Gauss Elimination is necessary
    div2=A(3,1)/A(1,1); % A new cancellation factor is needed for the third row
    newrow3=A(1,:)*div2;
    newrow3=[A(3,:)-newrow3];  % Cancellation is executed
else length(A)<3 % If A is simply 2x2, no further cancellation is necessary
    newrow3=0;
    
end

%% Set Up First A Prime
Row1=(A(1,:)); % Based on the G.E. a new A matrix is constructed, called A prime
Row2=[newrow2];
Row3=[newrow3];
if newrow3<1 % Again, level of cancellation and construction depends on size of original A
    Aprime=[Row1;Row2];
else
    Aprime=[Row1;Row2;Row3];
end

%% Check to Pivot Again 
max=-1; %Based on G.E., another pivot step may be necessary
i_max=1;
if length(Aprime)>2
for i=1:row;
    check1=abs(newrow2(1)); %Place holder for first augmented row
    check2=abs(newrow3(1)); %Place holder for second augmented row
    if check1>check2
        Adub=[(newrow2);(newrow3)]; %If pivot is not necessary, don't do it
       
    elseif check2>check1;
        Adub=[(newrow3);(newrow2)]; % If pivot is necessary, do so and change P accordingly
        
    end
   
end
P=[1,0,0;0,0,1;0,1,0]
else length(Aprime)<3 % If A was a 2x2, the second pivot is superfluous
    check1=abs(A(1));
    check2=abs(newrow2(1));    
    Adub=[(check1),(check2)];
end



%% Gauss Elimination with Augmented Rows 2&3
if length(Aprime)>2 %Check if a final G.E. step is necessary
div3=newrow3(2)/newrow2(2);% Generate cancellation factor, and execute it 
row3prime=div3*newrow2;
row3prime=newrow3-row3prime;


%% Set up Final A Matrix
if length(A)>2 % Final L and U matrices will depend on previous steps of Pivots and Elim.
Atrip=[(A(1,:));(newrow2);(row3prime)];
U=Atrip % If the third cancellation as necessary, U will be based on this final matrix
L21=(A(2,1)/A(1,1));
L31=(A(3,1)/A(1,1));
L32=(newrow3(2)/newrow2(2));
L=[1,0,0;L21,1,0;L31,L32,1] % L is an augmented identity matrix with values generated by A filled in
else 
    U=Aprime %If the final cancellation was unnecesary, U and L will be generated from the values determined by...
    L21=A(2,1)/A(1,1); %the steps executed for this case in previous if statements
    L=[1,0;L21,1]
    P=[0,1;1,0]
end


end